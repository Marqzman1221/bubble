// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    shadowDatabaseUrl    = env("SHADOW_URL")
    referentialIntegrity = "prisma"
}

model Message {
    id       String    @id @default(cuid())
    parentId String?   @unique
    userId   String
    chatId   String
    text     String
    author   User      @relation(fields: [userId], references: [id])
    parent   Message?  @relation("DirectResponseChain", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
    children Message[] @relation("DirectResponseChain")
    Chat     Chat      @relation(fields: [chatId], references: [id])
}

model Chat {
    id       String    @id @default(cuid())
    users    User[]
    messages Message[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String         @id @default(cuid())
    name                   String?
    email                  String?        @unique
    emailVerified          DateTime?
    image                  String?
    accounts               Account[]
    sessions               Session[]
    messages               Message[]
    chats                  Chat[]
    ownedRelationships     Relationship[] @relation("RelationshipOwner")
    subjectedRelationships Relationship[] @relation("RelationshipSubject")
}

model Relationship {
    id        String @id @default(cuid())
    ownerId   String
    subjectId String
    owner     User   @relation("RelationshipOwner", fields: [ownerId], references: [id])
    subject   User   @relation("RelationshipSubject", fields: [subjectId], references: [id])
    status    Int
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
