generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    shadowDatabaseUrl    = env("SHADOW_URL")
    referentialIntegrity = "prisma"
}

model Message {
    id        String    @id @default(cuid())
    parentId  String?   @unique
    userId    String
    chatId    String
    text      String
    createdAt DateTime  @default(now())
    author    User      @relation(fields: [userId], references: [id])
    parent    Message?  @relation("DirectResponseChain", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
    children  Message[] @relation("DirectResponseChain")
    chat      Chat      @relation(fields: [chatId], references: [id])
}

model Chat {
    id       String    @id @default(cuid())
    users    User[]
    messages Message[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String             @id @default(cuid())
    name                   String?
    email                  String?            @unique
    emailVerified          DateTime?
    image                  String?
    accounts               Account[]
    sessions               Session[]
    messages               Message[]
    chats                  Chat[]
    ownedRelationships     UserRelationship[] @relation("UserRelationshipOwner")
    subjectedRelationships UserRelationship[] @relation("UserRelationshipSubject")
    sentFriendRequests     FriendRequest[]    @relation("FriendRequestSender")
    receivedFriendRequests FriendRequest[]    @relation("FriendRequestReceiver")
}

model UserRelationship {
    id        String @id @default(cuid())
    ownerId   String
    subjectId String
    owner     User   @relation("UserRelationshipOwner", fields: [ownerId], references: [id])
    subject   User   @relation("UserRelationshipSubject", fields: [subjectId], references: [id])
    status    Int
}

model FriendRequest {
    id         String @id @default(cuid())
    senderId   String
    receiverId String
    sender     User   @relation("FriendRequestSender", fields: [senderId], references: [id])
    receiver   User   @relation("FriendRequestReceiver", fields: [receiverId], references: [id])
    createdAt DateTime  @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ChatToUser {
    A String
    B String

    @@unique([A, B], map: "_ChatToUser_AB_unique")
    @@index([B], map: "_ChatToUser_B_index")
    @@map("_ChatToUser")
}
